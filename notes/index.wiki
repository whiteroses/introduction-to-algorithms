= Introduction to Algorithms notes =

Bookmark: p. 10 "Parallelism"
MIT 6-006-fall-2011?


== Sorting problem ==

Sort a sequence of numbers into nondecreasing order.

Input: A sequence of $n$ numbers $\langle a_1,a_2,...,a_n\rangle$.

Output: A permutation (reordering) $\langle a'_1,a'_2,...a'_n\rangle$ of the input sequence such that $a'_1\le{}a'_2\le{}...\le{}a'_n$. 

E.g. given input sequence $\langle 31, 41, 59, 26, 41, 58\rangle$, a sorting
algorithm returns as output the sequence $\langle 26, 31, 41, 41, 58, 59\rangle$.
The input sequence is an *instance* of the sorting problem.

correct:: An algorithm is said to be correct if for every input instance it
halts with the correct output: the correct algorithm *solves* the given
computational problem.


== NP-complete problems ==

For some problems, no efficient solution is known. A subset of these are known
as NP-complete:
* Although no efficient algorithm for an NP-complete problem has ever been
  found, it has never been proven that an efficient algorithm for one cannot
  exist.
* If an efficient algorithm exists for any one of them, then efficient
  algorithms exist for all of them.
* Several NP-complete problems are similar, but not identical, to problems for
  which we know of efficient algorithms.
